/**
 * 
 */
package org.zzz.actor;

import java.util.UUID;

import org.zzz.jds.task.Util;

/**
 * Actor Model interface implements Carl Hewitt's Actor model, which Erlang also employs
 * the same Actor model.
 * @author ming luo
 *
 */
public interface Actor {

    /**
     * Get the pid of the object. Since this is unique per object,
     * it has to be generated by the class that implements Actor interface.
     * @return
     */
    public UUID getPid();

    /**
     * This is a callback method to be implemented to execute code for receive.
     * @param fromId
     * @param message
     */
    public void receive(UUID fromId, Object message);

    /**
     * The start time is required to calculate the time out to wait for the message
     * to be arrived.
     * The default implementation is to get the current time whenever a message
     * is received.
     * @return
     */
    default public long getStartMilliSeconds() {
        return System.currentTimeMillis();
    }
    /**
     * The timeout is used to calculate the wait time until the message arrives.
     * The default is -1 which there is no time out and it waits indefinitely
     * until the message is received.
     * The start time is used to calculate the timeout.
     * @return
     */
    default public long getTimeoutMilliSeconds() {
        return -1;
    }
    /**
     * The is used to receive a message from the sender and calculate the timeout.
     * @param fromId
     * @param message
     */
    default public void invoke(UUID fromId, Object message) {
        long to = getTimeoutMilliSeconds();
        if (to > 0 && Util.isTimedOut(getStartMilliSeconds(), to)) {
            //TODO: implement timeout message or indicator
            return;
        }
        receive(fromId, message);
    }
    default public void register(String alias) {
        Pid.getInstance().register(alias, this);
    }

    default public void send(UUID toId, Object message) {
       Pid.getInstance().send(toId, message, getPid());
    }
    default public void send(String toAlias, Object message) {
        Pid.getInstance().send(toAlias, message, getPid());
    }

}
